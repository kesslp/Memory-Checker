00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 5/26/2015 12:55:12 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR EQU $0D
00000000  =0000000A                  8  LF EQU $0A
00000000                             9  
00000000  =0000000F                 10  mask    EQU $0000000F
00000000  =00000000                 11  counter EQU 0
00000000                            12  
00000400                            13      ORG    $400
00000400                            14  START:                  ; first instruction of program
00000400                            15  
00000400                            16  * Put program  here
00000400                            17  getOpCode                       *Gets opcode
00000400  41F9 00000924             18      LEA     code,A0             *Loads "code" which is the op code
00000406  3810                      19      MOVE.W  (A0),D4
00000408                            20      
00000408  3404                      21      MOVE.W  D4,D2               *gets put into D4 and D2
0000040A                            22      
0000040A  E95A                      23      ROL.W   #4,D2               *rotate the first 4 significant bits to lower 4 bits
0000040C                            24      
0000040C  C4BC 0000000F             25      AND.L   #mask,D2            *mask it to get only the first byte
00000412                            26      
00000412  1A02                      27      MOVE.B  D2,D5               *put that value into D5
00000414                            28  
00000414                            29  nopOpCode
00000414  B87C 4E71                 30      CMP.W   #$4E71,D4
00000418  6600 0012                 31      BNE     rtsOpCode
0000041C                            32      
0000041C  43F9 0000095A             33      LEA     outputNOP,A1
00000422  103C 000E                 34      MOVE.B  #14,D0
00000426  4E4F                      35      TRAP    #15
00000428  6000 04F6                 36      BRA     DONE
0000042C                            37      
0000042C                            38  rtsOpCode
0000042C  B87C 4E75                 39      CMP.W   #$4E75,D4
00000430  6600 000E                 40      BNE     leaOpCode
00000434                            41      
00000434  43F9 0000095F             42      LEA     outputRTS,A1
0000043A  103C 000E                 43      MOVE.B  #14,D0
0000043E  4E4F                      44      TRAP    #15
00000440                            45      
00000440                            46  leaOpCode
00000440  BA3C 0004                 47      CMP.B   #4,D5
00000444  6600 002A                 48      BNE     oriOpCode
00000448                            49      
00000448  43F9 00000964             50      LEA     outputLEA,A1
0000044E  103C 000E                 51      MOVE.B  #14,D0
00000452  4E4F                      52      TRAP    #15
00000454                            53      
00000454  4EB9 00000804             54      JSR     sourceEA
0000045A                            55      
0000045A  43F9 0000097D             56      LEA     outputComma,A1
00000460  103C 000E                 57      MOVE.B  #14,D0
00000464  4E4F                      58      TRAP    #15
00000466                            59      
00000466  4EB9 00000904             60      JSR     addaDestEA
0000046C                            61      
0000046C  6000 04B2                 62      BRA     DONE
00000470                            63      
00000470                            64  oriOpCode                       *OR opcode
00000470  BA3C 0000                 65      CMP.B   #0,D5               
00000474  6600 0002                 66      BNE     moveByteOpCode      *if not, go to next opcode
00000478                            67      
00000478                            68  moveByteOpCode                  *MOVE.B opcode
00000478  BA3C 0001                 69      CMP.B   #1,D5
0000047C  6600 0036                 70      BNE     moveWordOpCode 
00000480                            71  
00000480                            72  moveByteMethod                  *MOVE.B output
00000480  43F9 0000093E             73      LEA     outputMOVE,A1       *Outputs "MOVE" onto console
00000486  103C 000E                 74      MOVE.B  #14,D0
0000048A  4E4F                      75      TRAP    #15
0000048C                            76      
0000048C  43F9 00000969             77      LEA     outputByte,A1       *Outputs ".B" onto console
00000492  103C 000E                 78      MOVE.B  #14,D0
00000496  4E4F                      79      TRAP    #15
00000498                            80      
00000498  4EB9 00000804             81      JSR     sourceEA            *Jump to subroutine sourceEA
0000049E                            82      
0000049E  43F9 0000097D             83      LEA     outputComma,A1      *Outputs a comma onto console
000004A4  103C 000E                 84      MOVE.B  #14,D0
000004A8  4E4F                      85      TRAP    #15
000004AA                            86      
000004AA  4EB9 000008E8             87      JSR     moveDestinationEA   *Jump to subroutine moveDestinationEA
000004B0                            88      
000004B0  6000 046E                 89      BRA     DONE                *Yay done
000004B4                            90      
000004B4                            91  
000004B4                            92  moveWordOpCode                  *MOVE.W opcode
000004B4  BA3C 0003                 93      CMP.B   #3,D5
000004B8  6600 005A                 94      BNE     moveLongOpCode
000004BC                            95     
000004BC                            96  moveWordMethod                  *MOVE.W output
000004BC  3404                      97      MOVE.W  D4,D2               *D4 has the original word
000004BE  323C 000A                 98      MOVE.W  #10,D1              *Move the value 10 into D1 since ROL has issues with
000004C2  E37A                      99      ROL.W   D1,D2               *   immediate values > 8
000004C4                           100      
000004C4  B47C 0001                101      CMP.W   #1,D2               *If the rotated value is a 1, it's a MOVEA.W
000004C8  6700 0012                102      BEQ     moveAWordMethod    
000004CC                           103      
000004CC  43F9 0000093E            104      LEA     outputMOVE,A1       *Outputs "MOVE." onto console
000004D2  103C 000E                105      MOVE.B  #14,D0
000004D6  4E4F                     106      TRAP    #15
000004D8  6000 0012                107      BRA     moveWordMethodpt2   *Go to the rest of the method~
000004DC                           108      
000004DC                           109  moveAWordMethod                 *MOVEA.W opcode
000004DC  43F9 00000944            110      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
000004E2  103C 000E                111      MOVE.B  #14,D0
000004E6  4E4F                     112      TRAP    #15
000004E8  6000 0002                113      BRA     moveWordMethodpt2   *Go to the rest of the method~
000004EC                           114      
000004EC                           115  moveWordMethodpt2               *Part 2 of the MOVE/MOVEA.W series
000004EC  43F9 0000096C            116      LEA     outputWord,A1       *Outputs ".W" onto console
000004F2  103C 000E                117      MOVE.B  #14,D0
000004F6  4E4F                     118      TRAP    #15
000004F8                           119      
000004F8  4EB9 00000804            120      JSR     sourceEA            *Yay subroutines
000004FE                           121      
000004FE  43F9 0000097D            122      LEA     outputComma,A1      *outputs a comma onto console
00000504  103C 000E                123      MOVE.B  #14,D0
00000508  4E4F                     124      TRAP    #15
0000050A                           125      
0000050A  4EB9 000008E8            126      JSR     moveDestinationEA   *Gotta check the destination~
00000510                           127  
00000510  6000 040E                128      BRA     DONE                *I'm done, bra
00000514                           129  
00000514                           130  moveLongOpCode                  *MOVE.L opcode
00000514  BA3C 0002                131      CMP.B   #2,D5
00000518  6600 005C                132      BNE     addOpCode
0000051C                           133      
0000051C                           134  moveLongOpCodeMethod            *MOVE.L output
0000051C  340A                     135      MOVE.W  A2,D2               *Gotta check if it's actually a MOVEA
0000051E  323C 000A                136      MOVE.W  #10,D1
00000522  E37A                     137      ROL.W   D1,D2
00000524                           138      
00000524  B47C 0001                139      CMP.W   #1,D2
00000528  6700 0012                140      BEQ     moveALongMethod   
0000052C                           141  
0000052C  43F9 0000093E            142      LEA     outputMOVE,A1       *outputs "MOVE" onto console
00000532  103C 000E                143      MOVE.B  #14,D0
00000536  4E4F                     144      TRAP    #15
00000538                           145      
00000538  6000 0012                146      BRA     moveLongMethodpt2   *Go to Part 2 of the MOVE series~
0000053C                           147      
0000053C                           148  moveALongMethod                 *MOVEA.L output
0000053C  43F9 00000944            149      LEA     outputMOVEA,A1      *Outputs "MOVEA" onto console
00000542  103C 000E                150      MOVE.B  #14,D0
00000546  4E4F                     151      TRAP    #15
00000548  6000 0002                152      BRA     moveLongMethodpt2   *Go to part 2~
0000054C                           153      
0000054C                           154  moveLongMethodpt2               *Part 2, the sequel(SQL?)
0000054C                           155      
0000054C  43F9 0000096F            156      LEA     outputLong,A1       *Outputs ".L" onto console
00000552  103C 000E                157      MOVE.B  #14,D0
00000556  4E4F                     158      TRAP    #15
00000558                           159      
00000558  5207                     160      ADD.B   #1,D7
0000055A                           161      
0000055A  4EB9 00000804            162      JSR     sourceEA            *Go output source
00000560                           163      
00000560  43F9 0000097D            164      LEA     outputComma,A1      *Yay commas
00000566  103C 000E                165      MOVE.B  #14,D0
0000056A  4E4F                     166      TRAP    #15
0000056C                           167      
0000056C  4EB9 000008E8            168      JSR     moveDestinationEA    *Output destination
00000572  6000 03AC                169      BRA     DONE
00000576                           170  
00000576                           171  addOpCode                        *ADD opcode
00000576  BA3C 000D                172      CMP.B   #13,D5
0000057A  6600 0040                173      BNE     subOpCode    
0000057E                           174      
0000057E                           175  addMethod                        *ADD output
0000057E  43F9 0000092C            176      LEA     outputADD,A1         *Outputs "ADD" onto console
00000584  103C 000E                177      MOVE.B  #14,D0
00000588  4E4F                     178      TRAP    #15
0000058A                           179      
0000058A  4EB9 00000730            180      JSR     dotOpMode           *Checks if it's a byte,word, or long
00000590                           181      
00000590  BC3C 0001                182      CMP.B   #1,D6               *If D6 == 1, the data register is the source
00000594  6700 0162                183      BEQ     altOrder            *   D6 was decided in dotOpMode(?)
00000598                           184      
00000598  BC3C 0002                185      CMP.B   #2,D6
0000059C  6700 0176                186      BEQ     addaOrder           *go do ADDA stuff
000005A0                           187      
000005A0  4EB9 00000804            188      JSR     sourceEA            *outputs what the source is
000005A6                           189      
000005A6  43F9 0000097D            190      LEA     outputComma,A1      *Commas~~~
000005AC  103C 000E                191      MOVE.B  #14,D0
000005B0  4E4F                     192      TRAP    #15
000005B2                           193      
000005B2  4EB9 000008BC            194      JSR     addDestinationEA       *outputs what the destination is
000005B8                           195      
000005B8  6000 0366                196      BRA     DONE
000005BC                           197      
000005BC                           198  subOpCode
000005BC  BA3C 0009                199      CMP.B   #9,D5               *is it SUB?
000005C0  6600 0038                200      BNE     subQOpCode          *not SUB, check if SUBQ
000005C4                           201  
000005C4                           202  subMethod
000005C4  43F9 00000933            203      LEA     outputSUB,A1        *output SUB to the console
000005CA  103C 000E                204      MOVE.B  #14,D0  
000005CE  4E4F                     205      TRAP    #15
000005D0                           206  
000005D0  4EB9 00000730            207      JSR     dotOpMode           *check if its a B,W, or L
000005D6                           208  
000005D6  BC3C 0001                209      CMP.B   #1,D6               *if D6 == 1, the data register is the source
000005DA  6700 011C                210      BEQ     altOrder
000005DE                           211  
000005DE  4EB9 00000804            212      JSR     sourceEA            *outputs what the source is
000005E4                           213  
000005E4  43F9 0000097D            214      LEA     outputComma,A1      *commas
000005EA  103C 000E                215      MOVE.B  #14,D0
000005EE  4E4F                     216      TRAP    #15
000005F0                           217  
000005F0  4EB9 000008BC            218      JSR     addDestinationEA    *outputs what ths destination is
000005F6                           219  
000005F6  6000 0328                220      BRA     DONE                
000005FA                           221  
000005FA                           222  subQOpCode
000005FA  BA3C 0005                223      CMP.B   #5,D5               *is it SUBQ?
000005FE  6600 007E                224      BNE     divsWOpCode         *check if its DIVS.W
00000602                           225      
00000602                           226  subQMethod
00000602  43F9 00000938            227      LEA     outputSUBQ,A1       *output SUBQ
00000608  103C 000E                228      MOVE.B  #14,D0
0000060C  4E4F                     229      TRAP    #15
0000060E                           230      
0000060E  3604                     231      MOVE.W  D4,D3               *move original word from D4
00000610  123C 000A                232      MOVE.B  #10,D1              *hacks
00000614  E37B                     233      ROL.W   D1,D3               *ROL by 10
00000616  C6BC 00000003            234      AND.L   #00000003,D3        *Mask 
0000061C  4EB9 000007C8            235      JSR     byteOpMode          *check if B,W,L
00000622                           236      
00000622  4EB9 0000063E            237      JSR     subQData            *outputs #1-#8
00000628                           238      
00000628  43F9 0000097D            239      LEA     outputComma,A1      *commas
0000062E  103C 000E                240      MOVE.B  #14,D0
00000632  4E4F                     241      TRAP    #15
00000634                           242      
00000634  4EB9 00000804            243      JSR     sourceEA            *get the source
0000063A                           244      
0000063A  6000 02E4                245      BRA     DONE
0000063E                           246      
0000063E                           247      
0000063E                           248  subQData
0000063E  3604                     249      MOVE.W  D4,D3               *move original word from D4
00000640  EF5B                     250      ROL.W   #7,D3               *ROL 7
00000642  C6BC 00000007            251      AND.L   #$00000007,D3       *mask the bits
00000648                           252      
00000648  B63C 0000                253      CMP.B   #0,D3               *if its 0 display 8
0000064C  6700 0018                254      BEQ     display8ForSubQ
00000650                           255      
00000650  43F9 0000097B            256      LEA     outputPound,A1      *output #
00000656  103C 000E                257      MOVE.B  #14,D0
0000065A  4E4F                     258      TRAP    #15
0000065C                           259      
0000065C  1203                     260      MOVE.B  D3,D1               *output 1-7
0000065E  103C 0003                261      MOVE.B  #3,D0
00000662  4E4F                     262      TRAP    #15
00000664                           263      
00000664  4E75                     264      RTS                         *return to subQmethod
00000666                           265      
00000666                           266  display8ForSubQ
00000666                           267  
00000666  43F9 0000097B            268      LEA     outputPound,A1      *output #
0000066C  103C 000E                269      MOVE.B  #14,D0
00000670  4E4F                     270      TRAP    #15
00000672                           271      
00000672  123C 0008                272      MOVE.B  #8,D1               *output 8
00000676  103C 0003                273      MOVE.B  #3,D0
0000067A  4E4F                     274      TRAP    #15
0000067C                           275      
0000067C  4E75                     276      RTS                         *return to subQMethod
0000067E                           277      
0000067E                           278  divsWOpCode
0000067E  BA3C 0008                279      CMP.B   #8,D5
00000682  6700 0006                280      BEQ     divsWCheck          *bits 8,7,6 need to make 7 to be DIVSW
00000686  6000 0040                281      BRA     mulsWOpCode
0000068A                           282      
0000068A                           283  divsWCheck
0000068A  3604                     284      MOVE.W  D4,D3
0000068C  143C 000A                285      MOVE.B  #10,D2
00000690  E57B                     286      ROL.W   D2,D3
00000692  C6BC 00000007            287      AND.L   #$00000007,D3
00000698  B63C 0007                288      CMP.B   #7,D3
0000069C  6600 0282                289      BNE     DONE
000006A0                           290      
000006A0  43F9 00000952            291      LEA     outputDIVSW,A1
000006A6  103C 000E                292      MOVE.B  #14,D0
000006AA  4E4F                     293      TRAP    #15
000006AC                           294      
000006AC  4EB9 00000804            295      JSR     sourceEA 
000006B2                           296      
000006B2  43F9 0000097D            297      LEA     outputComma,A1
000006B8  103C 000E                298      MOVE.B  #14,D0
000006BC  4E4F                     299      TRAP    #15
000006BE                           300      
000006BE  4EB9 000008BC            301      JSR     addDestinationEA
000006C4                           302      
000006C4  6000 025A                303      BRA     DONE
000006C8                           304      
000006C8                           305  mulsWOpCode
000006C8  BA3C 000C                306      CMP.B   #12,D5
000006CC  6600 0252                307      BNE     DONE    
000006D0                           308  
000006D0                           309  mulsWMethod
000006D0  43F9 0000094B            310      LEA     outputMULSW,A1
000006D6  103C 000E                311      MOVE.B  #14,D0
000006DA  4E4F                     312      TRAP    #15
000006DC                           313      
000006DC  4EB9 00000804            314      JSR     sourceEA
000006E2                           315      
000006E2  43F9 0000097D            316      LEA     outputComma,A1
000006E8  103C 000E                317      MOVE.B  #14,D0
000006EC  4E4F                     318      TRAP    #15
000006EE                           319      
000006EE  4EB9 000008BC            320      JSR     addDestinationEA
000006F4                           321      
000006F4  6000 022A                322      BRA     DONE
000006F8                           323  
000006F8                           324  
000006F8                           325  altOrder                            *outputs the Dn as the source for ADD
000006F8  4EB9 000008BC            326      JSR     addDestinationEA
000006FE                           327      
000006FE  43F9 0000097D            328      LEA     outputComma,A1
00000704  103C 000E                329      MOVE.B  #14,D0
00000708  4E4F                     330      TRAP    #15
0000070A                           331      
0000070A  4EB9 00000804            332      JSR     sourceEA
00000710  6000 020E                333      BRA     DONE
00000714                           334      
00000714                           335  addaOrder                           *ADDA method
00000714  4EB9 00000804            336      JSR     sourceEA                *output source first
0000071A                           337      
0000071A  43F9 0000097D            338      LEA     outputComma,A1          *Comma
00000720  103C 000E                339      MOVE.B  #14,D0
00000724  4E4F                     340      TRAP    #15
00000726                           341      
00000726  4EB9 00000904            342      JSR     addaDestEA              *Have to set destination mode in addaDestEA
0000072C  6000 01F2                343      BRA     DONE
00000730                           344  
00000730                           345  
00000730                           346  dotOpMode                           *Checks if it's a Byte,Word, or Long for ADD and SUB
00000730  3604                     347      MOVE.W  D4,D3                   *Gets the original code from D4                 
00000732  143C 000A                348      MOVE.B  #10,D2                  *yay hacks
00000736                           349      
00000736  E57B                     350      ROL.W   D2,D3                   *Rotates the original left by 10 bits
00000738  C6BC 00000007            351      AND.L   #$00000007,D3           *mask it up
0000073E                           352      
0000073E  B63C 0003                353      CMP.B   #3,D3                   
00000742  6E00 0006                354      BGT     altOpMode               *if value is > 3, Dn is the source
00000746                           355      
00000746  6000 0080                356      BRA     byteOpMode    
0000074A                           357  
0000074A                           358  altOpMode                           *But wait, there's more!
0000074A  B63C 0003                359      CMP.B   #3,D3                   *If it's 3, it's an ADDA.W
0000074E  6700 0022                360      BEQ     addaWOpMode
00000752                           361      
00000752  B63C 0007                362      CMP.B   #7,D3                   *If it's a 7, it's an ADDA.L
00000756  6700 0044                363      BEQ     addaLOpMode             *Otherwise, it's just ADD with Dn in source
0000075A                           364      
0000075A  43F9 0000097F            365      LEA     outputDot,A1            *Since ADD needs a dot to be ADD.
00000760  103C 000E                366      MOVE.B  #14,D0
00000764  4E4F                     367      TRAP    #15
00000766                           368      
00000766  1C3C 0001                369      MOVE.B  #1,D6                   *D6 is 1 if Dn is the source
0000076A  C63C 0003                370      AND.B   #$3,D3                  *Mask it so it can continue with the output
0000076E  6000 0058                371      BRA     byteOpMode              *without the meddling 2^2 bit
00000772                           372  
00000772                           373  addaWOpMode                         *It's an ADDA.W
00000772  3C3C 0002                374      MOVE.W  #2,D6
00000776                           375      
00000776  43F9 00000931            376      LEA     outputADDA,A1
0000077C  103C 000E                377      MOVE.B  #14,D0
00000780  4E4F                     378      TRAP    #15
00000782                           379      
00000782  43F9 0000097F            380      LEA     outputDot,A1
00000788  103C 000E                381      MOVE.B  #14,D0
0000078C  4E4F                     382      TRAP    #15
0000078E                           383      
0000078E  43F9 0000096C            384      LEA     outputWord,A1
00000794  103C 000E                385      MOVE.B  #14,D0
00000798  4E4F                     386      TRAP    #15
0000079A                           387      
0000079A  4E75                     388      RTS
0000079C                           389      
0000079C                           390  addaLOpMode                         *It's an ADDA.L
0000079C  3C3C 0002                391      MOVE.W  #2,D6
000007A0                           392      
000007A0  5207                     393      ADD.B   #1,D7
000007A2                           394      
000007A2  43F9 00000931            395      LEA     outputADDA,A1
000007A8  103C 000E                396      MOVE.B  #14,D0
000007AC  4E4F                     397      TRAP    #15
000007AE                           398      
000007AE  43F9 0000097F            399      LEA     outputDot,A1
000007B4  103C 000E                400      MOVE.B  #14,D0
000007B8  4E4F                     401      TRAP    #15
000007BA                           402      
000007BA  43F9 0000096F            403      LEA     outputLong,A1
000007C0  103C 000E                404      MOVE.B  #14,D0
000007C4  4E4F                     405      TRAP    #15
000007C6                           406      
000007C6  4E75                     407      RTS
000007C8                           408      
000007C8                           409      
000007C8                           410  byteOpMode                          *It's a byte?
000007C8  B63C 0000                411      CMP.B   #0,D3
000007CC  6600 0010                412      BNE     wordOpMode
000007D0                           413      
000007D0  43F9 00000969            414      LEA     outputByte,A1           *Output ".B" !
000007D6  103C 000E                415      MOVE.B  #14,D0
000007DA  4E4F                     416      TRAP    #15
000007DC  4E75                     417      RTS                             *Time to return back in time
000007DE                           418      
000007DE                           419  wordOpMode                          *It's a word?
000007DE  B63C 0001                420      CMP.B   #1,D3
000007E2  6600 0010                421      BNE     longOpMode
000007E6                           422      
000007E6  43F9 0000096C            423      LEA     outputWord,A1           *Output ".W" onto console
000007EC  103C 000E                424      MOVE.B  #14,D0
000007F0  4E4F                     425      TRAP    #15
000007F2  4E75                     426      RTS                             *Time warp~
000007F4                           427      
000007F4                           428  longOpMode                          *It better be a long then
000007F4  43F9 0000096F            429      LEA     outputLong,A1           *outputs ".L" onto console
000007FA  103C 000E                430      MOVE.B  #14,D0
000007FE  4E4F                     431      TRAP    #15
00000800                           432      
00000800  5207                     433      ADD.B   #1,D7
00000802                           434     
00000802  4E75                     435      RTS                             *whoosh~
00000804                           436   
00000804                           437      
00000804                           438  sourceEA                            *output the Source EA
00000804  3604                     439      MOVE.W  D4,D3                   *Put the original opcode into D3
00000806  3403                     440      MOVE.W  D3,D2                   *Copy that into D2
00000808                           441      
00000808  E65A                     442      ROR.W   #3,D2                   *Whoo~ Rotating~
0000080A  C4BC 00000007            443      AND.L   #$00000007,D2           *D2 has Mode
00000810                           444      
00000810                           445  
00000810  C6BC 00000007            446      AND.L   #$00000007,D3           *D3 has Register
00000816                           447  
00000816                           448   
00000816                           449  DnMode                          *Is the Mode a Data Register?
00000816  4281                     450      CLR.L   D1
00000818                           451      
00000818  B43C 0000                452      CMP.B   #0,D2
0000081C  6600 0018                453      BNE     AnMode
00000820                           454      
00000820  43F9 00000979            455      LEA     outputDn,A1         *outputs "D" onto console
00000826  103C 000E                456      MOVE.B  #14,D0
0000082A  4E4F                     457      TRAP    #15
0000082C                           458  
0000082C  1203                     459      MOVE.B  D3,D1               *outputs the register, whatever the numeric value is
0000082E  103C 0003                460      MOVE.B  #3,D0
00000832  4E4F                     461      TRAP    #15
00000834                           462      
00000834  4E75                     463      RTS                         *wooo~
00000836                           464    
00000836                           465  AnMode                          *Mode is an Address Register?
00000836  B43C 0001                466      CMP.B   #1,D2
0000083A  6600 0018                467      BNE     deRefAnMode
0000083E                           468      
0000083E  43F9 00000977            469      LEA     outputAn,A1         *Outputs "A" onto console
00000844  103C 000E                470      MOVE.B  #14,D0
00000848  4E4F                     471      TRAP    #15
0000084A                           472      
0000084A  1203                     473      MOVE.B  D3,D1               *Outputs the register value
0000084C  103C 0003                474      MOVE.B  #3,D0
00000850  4E4F                     475      TRAP    #15
00000852                           476      
00000852  4E75                     477      RTS                         *psssh
00000854                           478      
00000854                           479  deRefAnMode                     *Mode is a (A0)?
00000854  B43C 0002                480      CMP.B   #2,D2               
00000858  6600 0024                481      BNE     immediateData
0000085C                           482      
0000085C  43F9 00000972            483      LEA     outputdeRefAn1,A1   *Outputs "(A" onto console
00000862  103C 000E                484      MOVE.B  #14,D0
00000866  4E4F                     485      TRAP    #15
00000868                           486      
00000868  1203                     487      MOVE.B  D3,D1               *outputs register value
0000086A  103C 0003                488      MOVE.B  #3,D0
0000086E  4E4F                     489      TRAP    #15
00000870                           490      
00000870  43F9 00000975            491      LEA     outputdeRefAn2,A1   *makes it pretty by outputting ")"
00000876  103C 000E                492      MOVE.B  #14,D0
0000087A  4E4F                     493      TRAP    #15
0000087C                           494      
0000087C  4E75                     495      RTS                         *=-=
0000087E                           496      
0000087E                           497  immediateData                   *Mode is an #<data>
0000087E  B43C 0007                498      CMP.B   #7,D2               *Mode for #<data> is 111
00000882  6600 009C                499      BNE     DONE                
00000886                           500      
00000886  B63C 0004                501      CMP.B   #4,D3               *Register for #<data> is 100
0000088A  6600 0094                502      BNE     DONE
0000088E                           503                                 
0000088E  43F9 0000097B            504      LEA     outputPound,A1      *Outputs "#"
00000894  103C 000E                505      MOVE.B  #14,D0
00000898  4E4F                     506      TRAP    #15
0000089A                           507      
0000089A  45F9 00000924            508      LEA     code,A2             *Gets the address, shifts it by a word
000008A0  548A                     509      ADD.L   #2,A2               *to get the immediate value    
000008A2                           510      
000008A2  BE3C 0001                511      CMP.B   #1,D7
000008A6  6700 0008                512      BEQ     immeDataLong
000008AA                           513      
000008AA  3612                     514      MOVE.W  (A2),D3
000008AC                           515      
000008AC  6000 0004                516      BRA     immediateDatapt2
000008B0                           517  
000008B0                           518  immeDataLong
000008B0  2612                     519      MOVE.L  (A2),D3    
000008B2                           520      
000008B2                           521      
000008B2                           522  immediateDatapt2               *Outputs register value
000008B2  2203                     523      MOVE.L  D3,D1
000008B4  103C 0003                524      MOVE.B  #3,D0
000008B8  4E4F                     525      TRAP    #15
000008BA                           526  
000008BA  4E75                     527      RTS                         *~owo~
000008BC                           528      
000008BC                           529  
000008BC                           530  addDestinationEA                *Since ADD only has data register in dest area
000008BC  3604                     531      MOVE.W  D4,D3
000008BE                           532      
000008BE  3403                     533      MOVE.W  D3,D2
000008C0                           534      
000008C0  720A                     535      MOVE.L  #10,D1
000008C2  E37A                     536      ROL.W   D1,D2
000008C4  C4BC 00000007            537      AND.L   #$00000007,D2       *D2 has mode
000008CA                           538      
000008CA                           539      
000008CA  EF5B                     540      ROL.W   #7,D3
000008CC  C6BC 00000007            541      AND.L   #$00000007,D3       *D3 has register
000008D2                           542      
000008D2                           543  DnRegister                      *For ADD only, since it only has Dn 
000008D2  43F9 00000979            544      LEA     outputDn,A1         *outputs "D"
000008D8  103C 000E                545      MOVE.B  #14,D0
000008DC  4E4F                     546      TRAP    #15
000008DE                           547      
000008DE  1203                     548      MOVE.B  D3,D1               *Outputs register value
000008E0  103C 0003                549      MOVE.B  #3,D0
000008E4  4E4F                     550      TRAP    #15
000008E6                           551      
000008E6  4E75                     552      RTS
000008E8                           553  
000008E8                           554  moveDestinationEA               *Destination output for MOVE
000008E8  3604                     555      MOVE.W  D4,D3
000008EA  3403                     556      MOVE.W  D3,D2
000008EC                           557      
000008EC  EF5B                     558      ROL.W   #7,D3
000008EE  C6BC 00000007            559      AND.L   #$00000007,D3       *D3 has Register
000008F4                           560      
000008F4  323C 000A                561      MOVE.W  #10,D1      
000008F8  E37A                     562      ROL.W   D1,D2               *D2 has Mode
000008FA  C4BC 00000007            563      AND.L   #$00000007,D2
00000900                           564      
00000900  6000 FF14                565      BRA     DnMode              *output what it is, bra
00000904                           566      
00000904                           567  addaDestEA                      *Sets up the dest mode to be proper
00000904  3604                     568      MOVE.W  D4,D3               *Get the original code again
00000906  3403                     569      MOVE.W  D3,D2
00000908                           570      
00000908  EF5B                     571      ROL.W   #7,D3               
0000090A  C6BC 00000007            572      AND.L   #$00000007,D3       *D3 has register
00000910                           573      
00000910  323C 000A                574      MOVE.W  #10,D1
00000914  E37A                     575      ROL.W   D1,D2               *Have to AND it by 1, since the mode for ADDA
00000916  C4BC 00000001            576      AND.L   #$00000001,D2       *is always an Address
0000091C                           577      
0000091C  6000 FEF8                578      BRA     DnMode
00000920                           579          
00000920                           580  DONE
00000920                           581  
00000920  FFFF FFFF                582      SIMHALT             ; halt simulator
00000924                           583  
00000924                           584  * Put variables and constants here
00000924                           585  
00000924= 43D2                     586  code        DC.W    $43D2
00000926                           587  
00000926                           588  
00000926= D640                     589  addCode     DC.W    $D640
00000928                           590  
00000928= 303C                     591  moveCode1   DC.W    $303C
0000092A= 0011                     592  moveCode2   DC.W    $0011
0000092C                           593  
0000092C= 41 44 44 2E 00           594  outputADD   DC.B    'ADD.',0
00000931= 41 00                    595  outputADDA  DC.B    'A',0
00000933= 53 55 42 2E 00           596  outputSUB   DC.B    'SUB.',0
00000938= 53 55 42 51 2E 00        597  outputSUBQ  DC.B    'SUBQ.',0
0000093E= 4D 4F 56 45 2E 00        598  outputMOVE  DC.B    'MOVE.',0
00000944= 4D 4F 56 45 41 2E 00     599  outputMOVEA DC.B    'MOVEA.',0
0000094B= 4D 55 4C 53 2E 57 00     600  outputMULSW DC.B    'MULS.W',0
00000952= 44 49 56 53 2E 57 ...    601  outputDIVSW DC.B    'DIVS.W ',0
0000095A= 4E 4F 50 20 00           602  outputNOP   DC.B    'NOP ',0
0000095F= 52 54 53 20 00           603  outputRTS   DC.B    'RTS ',0
00000964= 4C 45 41 20 00           604  outputLEA   DC.B    'LEA ',0
00000969                           605  
00000969= 42 20 00                 606  outputByte  DC.B    'B ',0
0000096C= 57 20 00                 607  outputWord  DC.B    'W ',0
0000096F= 4C 20 00                 608  outputLong  DC.B    'L ',0
00000972                           609  
00000972= 28 41 00                 610  outputdeRefAn1   DC.B    '(A',0
00000975= 29 00                    611  outputdeRefAn2   DC.B    ')',0
00000977                           612  
00000977= 41 00                    613  outputAn    DC.B    'A',0
00000979= 44 00                    614  outputDn    DC.B    'D',0
0000097B= 23 00                    615  outputPound DC.B    '#',0
0000097D                           616  
0000097D= 2C 00                    617  outputComma DC.B    ',',0
0000097F= 2E 00                    618  outputDot   DC.B    '.',0
00000981                           619      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADESTEA          904
ADDALOPMODE         79C
ADDAORDER           714
ADDAWOPMODE         772
ADDCODE             926
ADDDESTINATIONEA    8BC
ADDMETHOD           57E
ADDOPCODE           576
ALTOPMODE           74A
ALTORDER            6F8
ANMODE              836
BYTEOPMODE          7C8
CODE                924
COUNTER             0
CR                  D
DEREFANMODE         854
DISPLAY8FORSUBQ     666
DIVSWCHECK          68A
DIVSWOPCODE         67E
DNMODE              816
DNREGISTER          8D2
DONE                920
DOTOPMODE           730
GETOPCODE           400
IMMEDATALONG        8B0
IMMEDIATEDATA       87E
IMMEDIATEDATAPT2    8B2
LEAOPCODE           440
LF                  A
LONGOPMODE          7F4
MASK                F
MOVEALONGMETHOD     53C
MOVEAWORDMETHOD     4DC
MOVEBYTEMETHOD      480
MOVEBYTEOPCODE      478
MOVECODE1           928
MOVECODE2           92A
MOVEDESTINATIONEA   8E8
MOVELONGMETHODPT2   54C
MOVELONGOPCODE      514
MOVELONGOPCODEMETHOD  51C
MOVEWORDMETHOD      4BC
MOVEWORDMETHODPT2   4EC
MOVEWORDOPCODE      4B4
MULSWMETHOD         6D0
MULSWOPCODE         6C8
NOPOPCODE           414
ORIOPCODE           470
OUTPUTADD           92C
OUTPUTADDA          931
OUTPUTAN            977
OUTPUTBYTE          969
OUTPUTCOMMA         97D
OUTPUTDEREFAN1      972
OUTPUTDEREFAN2      975
OUTPUTDIVSW         952
OUTPUTDN            979
OUTPUTDOT           97F
OUTPUTLEA           964
OUTPUTLONG          96F
OUTPUTMOVE          93E
OUTPUTMOVEA         944
OUTPUTMULSW         94B
OUTPUTNOP           95A
OUTPUTPOUND         97B
OUTPUTRTS           95F
OUTPUTSUB           933
OUTPUTSUBQ          938
OUTPUTWORD          96C
RTSOPCODE           42C
SOURCEEA            804
START               400
SUBMETHOD           5C4
SUBOPCODE           5BC
SUBQDATA            63E
SUBQMETHOD          602
SUBQOPCODE          5FA
WORDOPMODE          7DE
